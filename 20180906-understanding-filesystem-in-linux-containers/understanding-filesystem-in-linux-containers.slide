Understanding filesystem in linux containers
How to manage volumes in container?
06 Sep 2018

Yecheng Fu
cofyc.jackson@gmail.com
@cofyc
https://yechengfu.com

* Understand Linux VFS first

*One:* The Virtual File System provides a uniform interface (one big tree
structure) within the kernel which allows different filesystems to coexist.

Filesystems kernel supports:

.code filesystems.txt

Note:

- VFS: Virtual File System

* Understand Linux VFS first

*Two:* It's able to register or unregister filesystems into this one big tree by
mounting or unmounting.

.code mounting.txt

Tells the kernel to attach the filesystem found on *source* (e.g. device or anoynymous storage) at target directory.

.code unmounting.txt

Detaches file system(s) from the file hierarchy.

* Understand Linux VFS first

*Three*: Each process can have its own mount namespace and do mounting and
unmounting in it.

.code unshare_mount.txt

* Understand Linux VFS first

*Four*: Different mount namespaces can share mount points through binding.

A process which have its own namespace may want to access files in other mount
namespace (e.g. host namespace).

.code unshare_mount2.txt

Note: Bind remounts a subtree somewhare else, so that its contents are available in both places.

* Understand Linux VFS first

*Five*: Mount point can have different states

- shared (k8s: *Bidirectional*): Receive and forward propgation events to peer group.
- slave (k8s: *HostToContainer*): Recive and don't forward propgation events to peer group.
- private (k8s: *None*, the default): Do not receive or forward any propgation events.
- shared and slave: It receives propagation events from its master vfsmount, and also forwards propagation events to its peer group. 
- unbindable: Do not receive or forward any propagation events and cannot be bind mounted.

Note:

- The propagation tree is orthogonal to the mount tree and mount namespace.
- Only a slave vfsmount can be made as 'shared and slave' by making it shared again. e.g. run a new container in container, and share mounts with it.

* Understand Linux VFS first

*Six*: More mounting semantics.

- rbind: Bind recursively, same as bind except it applies to all the mounts in the tree. 
- move: Move a mountpoint to another place.
- mount options: ro/rw,sync, etc. and filesystem-specific options.

* Typical isolated virtual filesystem of a container

.code vfs.txt

* How to manage volumes in container?

*One*: Mount in its own namespace.

* How to manage volumes in container?

*Two*: Mount in host namespace and bind it into container namespace.

This is how container runtime does.

* References

- https://www.kernel.org/doc/Documentation/filesystems/vfs.txt
- https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt
- https://docs.docker.com/
- https://github.com/p8952/bocker
- https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation
